=begin pod
=TITLE Raku Documentation
=SUBTITLE The Collection files for the Raku Documentation site.

(The README.md version is generated from C<repo_docs/README.rakdoc>)

=head1 Installation

The assumption for this README is that the OS is a version of Linux, or that anyone
wanting to attempt this knows their own OS well enough to understand the differences.

This repo can be cloned and the main dependencies can be installed with

    zef install . --deps-only

in the cloned directory. There are a couple of C libraries that may need to be installed as well,
such as OpenSSL and LibArchive (make sure to install the `-dev` versions).

Cro is needed for serving the rendered files locally. You may wish to install it separately.

Syntax highlighting of Raku code in the documentation still requires a `node.js` stack. See the documentation
for `Raku::Pod::Render` for more information.

=head1 Building the documentation locally

Generic build steps:
=item clone this repo to C<raku-doc-website/>
=item2 No need to clone the Raku documentation sources at C<github.com/raku/doc/doc> to
C<local_raku_docs/doc/> as this is done automatically by the final step. However, if you
already have a local C<raku/doc> repo, then change the relevant key in C<config.raku>. It
should be intuitive what is required.

=item2 Note also the C<'_'> character in the default directory name. This is important for Collection
if the document sources are under the C<raku-doc-website> because Collection treats directories
without C<'_'> as C<mode> directories.

=item assume the rendered html will be built in C<rendered_html>

All these names can be changed by changing the relevant parts of the config.raku file

Now run

    bin_files/build-site

If Cro and Cro::HTTP have been installed, then C<build-site> will automatically launch a Cro app
and the whole website will be served on C<localhost:30000>.

=head1 Options for C<build-site>

There are many options for build-site, which is a thin wrapper around the C<collect> sub in C<Collection>.

However, you can run

    bin_files/build-site --help

or

    bin_files/build-site --more-help

for a quick overview.

=head1 Directory naming

As mentioned in the items above, Collection expects a sub-directory that does not
include a C<'_'> in its name to be a 'Mode'.

For this reason, documentation sources for this repo are in C<repo_docs> and the
binaries are in C<bin_files>.

This may eventually prove unnecessary, but it is a reasonable convention is kept for the time being.

Further, in the future, another Mode may be useful in this repository in due course that
generates an epub output.

=head1 Deprecated URLs

Occasionally, file names change. This would cause a 404 error if an external webpage,
e.g. someone's blog, has a link to a changed file name. To overcome this, a mapping file
C<deprecated-urls> is kept in C<Website/plugins/raku-doc-setup>. The plugin adds this file
to `rendered_html/assets/`, and the Caddy system rewrites routes from the deprecated name
to the working alternative.

=head1 Plugins and Templates

Collection is designed to handle multiple Modes, and for plugins to be contributed in
a similar way to Raku Modules. However, for the Raku documentation system, it seems
pragmatic at the start for the plugins to be tailored specifically for this site.

Consequently, the plugins are directly copied into the OgdenWebb directory, rather than
using Collection's C<refresh> functionality. This comment may seem odd but I include it to preclude questions
that will arise when reading the documentation for C<Collection>.

The Templates were originally developed to mimic B<Moritz Lenz's> Raku site (the one we are used to).
Relevant template keys are modified in the C<ogdenwebb> plugin.
I would expect this to change over time, and for the default templates to change
to the OgdenWebb templates. But I would suggest this is done incrementally.

=head1 Working on Collection plugins

Collection uses plugins - they can be found under the directory C< Website/plugins/ > - which
contain both callables that set up templates, associate CSS (defined using SCSS) with classes etc,
and manipulate data.

Whilst the best way to work on the plugins is, as described below, to use the dedicated
plugins distribution, it increases the learning curve and also means that there is an
extra step in directly importing Collection plugins to the Raku Documentation repo (as
mentioned above, the 'refresh' functionality of Collection is not used here).

However, to make development here easier, there are three utilities which directly affect
this distribution:
=item C<update-css> which is a Bash file and takes the name of a plugin as its argument.
=item C<bin_files/test-all-plugins> This runs all the test files in all the plugins
=item C<bin_files/build-site> By default this will
=item2 refresh the documents from the contents repository at github/raku/docs
=item2 cache any changes to the source documents
=item2 render all the source documents

However, if a change to a plugin has been made and it can be seen with only one or two
source files, then it is quicker to use the C<build-site> option C<with-only>, eg

    bin_files/build-site --with-only='language.rakudoc operators'

There is a file in C<Website/structure-sources/language.rakudoc> and a file in the doc sources
called C<doc/language/operators.pod6>. Any element in the space delimited list following C<--with-only>
that matches a source file name will be rendered.

A better way, though, to tweak or add new plugins and see how they affect the website, is to install
the distribution C<raku-collection-plugin-development>.

=head1 Deployment of website

The Production version of the website is at C<docs.raku.org>. A regularly updated
version is at C<docs-dev.raku.org>.

Here's how deployment works right now:

After a PR to the doc-website repository is reviewed, it's merged to C<main>
The very fact that it is a merge to main is important metadata for the CI pipeline.
See also the Buildkite docs on using conditionals in pipeline steps.

What this means in practice is that the container is only built
if the changes are happening on main:
=item A merge to main from a PR
=item A periodic scheduled build against main (every two hours);
=item2 We need this one so we can pick up content changes from the other repo.
=item The Raku scripts clone Raku/doc as a part of their build process.

Here is how the container build works:
=item We start from a caddy base image
=item The tarball of generated static source code is downloaded from Buildkite's
temporary storage

=item This tarball is added and unarchived inside the container
=item The "Caddyfile" at the root of this repo is also added
=item The container is "committed", tagged, and pushed to the quay.io container registry
=item2 The tag that we use is quay.io/colemanx/raku-doc-website:latest
=item2 The fact that we are overwriting "latest" every two hours on a
periodic build can be seen L<here|https://quay.io/repository/colemanx/raku-doc-website?tab=history>

=item Completely independent of this process is a cron job running on the
dev server. This job simply pulls the latest container image and swaps out
what's running. If this is working properly, the website at
C<https://docs-dev.raku.org> is updated at most every two hours with the
latest content, and the latest changes from this repo.

Deployment to Production is similar, but not automatic. The site maintainer
activates an agent running on the production server that pulls the latest
container image and swaps out what's running.

=end pod