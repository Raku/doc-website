=begin pod
=TITLE generate-secondaries is a plugin for Collection

This plugin creates the Secondary files that are generated by Documentable for the Raku
documentation system.

=head1 Operation

The C<render> key means that the templates will be installed, and the 'secondaries' name-space
will be created. But a 'heading' name-space is required for the heading template, and it
needs to contain a defs key. This is done by the render callable.

The template analyses the header using regexen and adds the results to defns.

The information is used to generate the Secondary files during the compilation stage, and
to update the %processed data for other Compilation plugables to access. The files are transferred
to the output directory during the compilation stage.

By default, all secondary file names will be hashed
and a map file C<prettyurls> will be generated with the url string and the hashed file name.
The file is stored in C<assets/>.

C<prettyurls> can be used by a webserver to map from unescaped urls including filesystem problematic
names to real html files. For example, for the Caddy server, the following stanzas will work
    root * /usr/lib/caddy
    map {path} {npath} {
        import /usr/lib/caddy/assets/prettyurls
    }
    try-files {npath}.html {path}.html {path}

If the config option C<hash-urls> is set to False (by default it is not set, which is taken to be True),
then C<prettyurls> will not be generated, and the secondary files will not be hashed.

During the transfer stage, the secondary files are deleted from the plugin's directory.

=head1 Secondary files

Raku documentation contains many C<=head> blocks (called headings below)
that define routines (methods, roles, subs etc)
operators, and syntax (infix postfix etc).

Items with the same name (e.g., say) may be defined and documented separately for different Types.
It makes sense to gather the same method name into a separate page.

As the documentation was written, two types of headings were created:
=item direct headings, such as C<=head1 sub say>
=item indirect headings, such as C<=head2 X<Multi-dispatch|Syntax,multi> >

If C<hash-urls> is False, direct headings are created in the directories C<routine/ and type/>;
indirect headings are created in the directories C<syntax/>.

The header blocks are analysed when the template is rendered.
In order to avoid parsing each source file twice to handle header blocks, the parsing is done
when the header block is rendered, by which time C<X<>> markup has already been rendered
into HTML. So to pick up indirect heading definitions, the HTML has to be examined.

Indirect headings will have text starting with an anchor C< <a ...> >, direct headings will have
ambient text.

The files are generated during the compilation stage.

A crucial assumption is about how much text to include after the definition header. The plugin
adds a C< <!--- defnmark d --> > where I<d> is the header level. Html to the next C< <hd > container,
where d is the same number, or the end of the html, is then included.

=head1 Filenames

Method/operator/syntax names are arbitrary collections of characters. They include characters that
=item may be used in filesystems, such as C</ . ..>
=item may be used in URLs, such as C< ? # >

To overcome filesystem conflicts, Documentable created filenames using the schema C<$> C<unicode name>.
This produced some ugly URLs. It also did not overcome some filesystem difficulties.

Documentable names may still be used in external references to the Raku documentation site.

This plugin distinguishes between the name of the file containing the HTML, the canonical URL, and the
Documentable URL.

The filename of the HTML is generated by taking the sha1 encoding of the method name, and placing it
in the subdirectory hashed.

A canonical URL is used internally and is exposed to the user when a mouse hover is placed over the link.

The mapping from the URL to the HTML file is contained in a text file called C<assets/prettyurls>.

Documentable URLS are also generated and placed in the mapping file.

=head2 Canonical URL

The canonical URL is composed in reference to L<RFC 3986 section 2.1|https://www.rfc-editor.org/rfc/rfc3986#section-2.1>.

   Characters that are allowed in a URI but do not have a reserved
   purpose are called unreserved.  These include uppercase and lowercase
   letters, decimal digits, hyphen, period, underscore, and tilde.

      unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"

All other characters are C<%> encoded such that a unicode character may have 1-3 groups of C<%HH>.
H is an uppercase hexadecimal digit. ASCII characters have 1 group. This is in accord with
L<RFC 3629 |https://datatracker.ietf.org/doc/html/rfc3629>.

=head1 Templates

Replaces Header template with one that creates the information for Secondary files

=end pod
