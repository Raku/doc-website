=begin pod
=TITLE generate-secondaries is a plugin for Collection

This plugin creates the Secondary files that are generated by Documentable for the Raku
documentation system.

=head1 Operation

The C<render> key means that the templates will be installed, and the 'secondaries' name-space
will be created. But a 'heading' name-space is required for the heading template, and it
needs to contain a defs key. This is done by the render callable.

The template analyses the header using regexen and adds the results to defns.

The information is used to generate the Secondary files during the compilation stage, and
to update the %processed data for other Compilation plugables to access. The files are transferred
to the output directory during the compilation stage.

During the transfer stage, the secondary files are deleted from the plugin's directory.

=head1 Secondary files

Raku documentation contains many C<=head> blocks (called headings below)
that define routines (methods, roles, subs etc)
operators, and syntax (infix postfix etc).

Items with the same name (eg., say) may be defined and documented separately for different Types.
It makes sense to gather the same method name into a separate page.

As the documentation was written, two types of headings were created:
=item direct headings, such as C<=head1 sub say>
=item indirect headings, such as C<=head2 X<Multi-dispatch|Syntax,multi> >

Direct headings are created in the directories C<routine/ and type/>.
Indirect headings are created in the directories C<syntax/>.

The header blocks are analysed when the template is rendered.
In order to avoid parsing each source file twice to handle header blocks, the parsing is done
when the header block is rendered, by which time C<X<>> markup has already been rendered
into HTML. So to pick up indirect heading definitions, the HTML has to be examined.

Indirect headings will have text starting with an anchor C< <a ...> >, direct headings will have
ambient text.

The files are generated during the compilation stage.

The biggest problem is to define how much text to include after the definition header. The plugin
adds a C< <!--- defnmark d --> > where I<d> is the header level. Html to the next C< <hd > container,
where d is the same number, or the end of the html, is then included.

=head1 Templates

Replaces Header template with one that creates the information for Secondary files

=end pod
